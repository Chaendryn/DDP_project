{
    "contents" : "library(shiny) \nlibrary(plotly)\nlibrary(XML)\nlibrary(reshape2)\nlibrary(stats)\nlibrary(graphics)\n\nshinyServer(function(input, output) {\n      \n      sliderValues <- reactive({\n            YearOut <- input$year2\n            \n      })\n\n      \n      output$plot <- renderUI({  # \"plot\" to be used as argument in server.R\n            data <- melt(data_table, id = c(\"Year\", \"Month\"))\n                              \n            subset_data <- data[(data$variable %in% input$check_group & data$Year == sliderValues()), ]  \n            ggVeh <- (qplot(x=Month, y=value, data=subset_data, color=variable, geom = c(\"path\")))\n            \n            layout <- list(\n                  autosize = FALSE, \n                  title = \"Searches of Vehicle Makes by Month\",\n                  width = 1100, \n                  height = 400,\n                  xaxis = list(\n                        autotick = FALSE, \n                        ticks = \"outside\", \n                        tick0 = 0, \n                        dtick = 1.00, \n                        ticklen = 4, \n                        tickwidth = 1, \n                        tickcolor = \"#eee\",\n                        title = \"Month\"\n                  ),\n                  yaxis = list(\n                        autotick = TRUE, \n                        ticks = \"outside\", \n                        tick0 = 0, \n                        dtick = 1.00, \n                        ticklen = 4, \n                        tickwidth = 1, \n                        tickcolor = \"#eee\",\n                        title = \"Number of searches\"\n                  ),\n                  margin = list(\n                        l = 70, \n                        r = 30, \n                        b = 40, \n                        t = 40, \n                        pad = 2\n                  ), \n                  paper_bgcolor = \"#ffffff\", \n                  plot_bgcolor = \"#eeeeee\"\n                  )\n            \n            py <- plotly(username=\"chaendryn\", key=\"tw7wr68s4e\", base.url=\"https://plot.ly\")  # Open Plotly connection\n           \n            res <- py$ggplotly(ggVeh, kwargs=list(layout = layout, \n                                                  \n                                                  filename=\"searchTrends\", \n                                                   fileopt=\"overwrite\", # Overwrite plot in Plotly's website\n                                                   auto_open=FALSE))\n            tags$iframe(src=res$response$url,\n                        frameBorder=\"0\",  # Some aesthetics\n                        height=400,\n                        width=1200)\n            \n      })\n      \n      \n      output$corplot <- renderPlot({  # \"plot\" to be used as argument in server.R\n            lv <- (names(data_table) %in% input$check_group)\n            tableData <- data_table[data_table$Year == sliderValues(), lv]\n            \n            ## The following code and figure is adapted from the help file for pairs and was found on http://personality-project.org/r/r.graphics.html\n            \n            ## Put (absolute) correlations on the upper panels, with size proportional to the correlations.\n            ## Creating the function (panel.cor)\n            panel.cor <- function(x, y, digits=2, prefix=\"\", cex.cor)\n            {\n                  usr <- par(\"usr\"); on.exit(par(usr))\n                  par(usr = c(0, 1, 0, 1))\n                  r = cor(x, y)\n                  txt <- format(c(r, 0.123456789), digits=digits)[1]\n                  txt <- paste(prefix, txt, sep=\"\")\n                  if(missing(cex.cor)) cex <- 0.5/strwidth(txt)\n                  text(0.5, 0.5, txt, cex = cex * abs(r))\n            }\n            \n            \n            ## Plotting the pairs plot matrix\n            \n            corplot <- pairs(tableData, lower.panel=panel.smooth, upper.panel=panel.cor, main = \"Correlation Pairs Plot\")\n                        \n      })\n      \n      \n      \n      \n      \n      output$table <- renderTable ({ \n            lv <- (names(data_table) %in% input$check_group)\n            tableData <- data_table[data_table$Year == sliderValues(), lv]\n            summary(tableData)\n            })\n      \n      output$yearText<- renderText({ paste(\"You have selected to view\", input$year2) })\n      \n      \n      \n      \n\n                                       \n})      \n      ",
    "created" : 1416503346944.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1187238151",
    "id" : "FDDA451A",
    "lastKnownWriteTime" : 1416769551,
    "path" : "C:/Users/yolandek/Videos/Coursera/Data Science Certificate/9. Data Products/Project/Trendify/server.R",
    "project_path" : "server.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}